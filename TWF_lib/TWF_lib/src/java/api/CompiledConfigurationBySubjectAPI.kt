package api

import config.CompiledConfiguration
import config.FunctionIdentifier
import expressiontree.ExpressionSubstitution
import expressiontree.ExpressionSubstitutionNormType
import expressiontree.NodeType
import mainpoints.compiledConfigurationBySettings
import mainpoints.configSeparator


fun createConfigurationFromRulePacksAndParams(
        rulePacks: Array<String> = listOf("Algebra").toTypedArray(),
        additionalParamsMap: Map<String, String> = mapOf()
): CompiledConfiguration {
    val expressionSubstitutions = getSubstitutionsByRulePacks(rulePacks)
    val simpleComputationRuleCodesCandidates = expressionSubstitutions.map { it.code }.filter { it.isNotBlank() }.toSet()
    return CompiledConfiguration(additionalParamsMap = additionalParamsMap, simpleComputationRuleCodesCandidates = simpleComputationRuleCodesCandidates).apply {
        compiledExpressionTreeTransformationRules.clear()
        compiledExpressionSimpleAdditionalTreeTransformationRules.clear()
        val handledCodesHashSet = hashSetOf<String>()
        for (substitution in expressionSubstitutions) {
            if (handledCodesHashSet.contains(substitution.code))
                continue
            handledCodesHashSet.add(substitution.code)
            if (substitution.left.nodeType == NodeType.EMPTY || substitution.right.nodeType == NodeType.EMPTY) {
                if (substitution.code.isNotEmpty()) {
                    expressionTreeAutogeneratedTransformationRuleIdentifiers.put(substitution.code, substitution)
                }
            } else {
                compiledExpressionTreeTransformationRules.add(substitution)
                if (substitution.simpleAdditional) {
                    compiledExpressionSimpleAdditionalTreeTransformationRules.add(substitution)
                }
            }
        }
    }
}


fun createConfigurationFromRulePacksAndDetailSolutionCheckingParams(
        rulePacks: Array<String> = listOf("Algebra").toTypedArray(),
        wellKnownFunctionsString: String = "${configSeparator}0$configSeparator${configSeparator}1$configSeparator+$configSeparator-1$configSeparator-$configSeparator-1$configSeparator*$configSeparator-1$configSeparator/$configSeparator-1$configSeparator^$configSeparator-1",
        expressionTransformationRulesString: String = "S(i, a, a, f(i))${configSeparator}f(a)${configSeparator}S(i, a, b, f(i))${configSeparator}S(i, a, b-1, f(i)) + f(b)", //function transformation rules, parts split by configSeparator; if it equals " " then expressions will be checked only by testing
        maxExpressionTransformationWeight: String = "1.0",
        unlimitedWellKnownFunctionsString: String = wellKnownFunctionsString,
        taskContextExpressionTransformationRules: String = "", //for expression transformation rules based on variables
        maxDistBetweenDiffSteps: String = "", //is it allowed to differentiate expression in one step
        scopeFilter: String = "", //subject scopes which user representation sings is used
        wellKnownFunctions: List<FunctionIdentifier> = listOf(),
        unlimitedWellKnownFunctions: List<FunctionIdentifier> = wellKnownFunctions,
        expressionTransformationRules: List<ExpressionSubstitution> = listOf() //full list of expression transformations rules
): CompiledConfiguration {
    val compiledConfiguration = compiledConfigurationBySettings(
            wellKnownFunctionsString,
            expressionTransformationRulesString,
            maxExpressionTransformationWeight,
            unlimitedWellKnownFunctionsString,
            taskContextExpressionTransformationRules,
            maxDistBetweenDiffSteps,
            scopeFilter,

            wellKnownFunctions,
            unlimitedWellKnownFunctions,
            expressionTransformationRules)
    if (rulePacks.isNotEmpty()) {
        val expressionSubstitutions = getSubstitutionsByRulePacks(rulePacks)
        compiledConfiguration.apply {
            compiledExpressionTreeTransformationRules.clear()
            compiledExpressionSimpleAdditionalTreeTransformationRules.clear()
            val handledCodesHashSet = hashSetOf<String>()
            for (substitution in expressionSubstitutions) {
                if (handledCodesHashSet.contains(substitution.code))
                    continue
                handledCodesHashSet.add(substitution.code)
                if (substitution.left.nodeType == NodeType.EMPTY || substitution.right.nodeType == NodeType.EMPTY) {
                    if (substitution.code.isNotEmpty()) {
                        expressionTreeAutogeneratedTransformationRuleIdentifiers.put(substitution.code, substitution)
                    }
                } else {
                    if (substitution.left.containsFunctionBesides(compiledConfiguration.definedFunctionNameNumberOfArgsSet) || substitution.right.containsFunctionBesides(compiledConfiguration.definedFunctionNameNumberOfArgsSet)) {
                        compiledExpressionTreeTransformationRules.add(substitution)
                        if (substitution.simpleAdditional) {
                            compiledExpressionSimpleAdditionalTreeTransformationRules.add(substitution)
                        }
                    }
                }
            }
        }
    }
    return compiledConfiguration
}

val rulePacksMap = mapOf(
        Pair("Algebra", getAllAlgebraSubstitutions()),
        Pair("ArithmeticPositiveAddition", getArithmeticPositiveAdditionSubstitutions()),
        Pair("ArithmeticAddition", getArithmeticAdditionSubstitutions()),
        Pair("ArithmeticMultiplication", getArithmeticMultiplicationSubstitutions()),
        Pair("ArithmeticDivision", getArithmeticDivisionSubstitutions()),
        Pair("ArithmeticPow", getArithmeticPowSubstitutions()),
        Pair("ArithmeticPowExtension", getArithmeticPowExtensionSubstitutions()),
        Pair("ShortMultiplication", getShortMultiplicationSubstitutions()),
        Pair("Logarithm", getLogarithmSubstitutions()),
        Pair("FactorialRecurrent", getFactorialSubstitutions()),
        Pair("Combinatorics", getCombinatoricsSubstitutions()),
        Pair("Trigonometry", getTrigonometrySubstitutions()),
        Pair("Complexes", getComplexesSubstitutions()),
        Pair("TrigonometryZk", getTrigonometryZkSubstitutions()),
        Pair("TrigonometryCompleteTgCtg", getTrigonometryCompleteTgCtgSubstitutions()),
        Pair("Logic", getLogicBaseSubstitutions()),
        Pair("LogicAbsorption", getLogicAbsorptionLawSubstitutions()),
        Pair("LogicResolution", getLogicResolutionSubstitutions()),
        Pair("PhysicsSimpleMoving", getPhysicsSimpleMovingSubstitutions()),
        Pair("PhysicsCircleMoving", getPhysicsCircleMovingSubstitutions()),
        Pair("PhysicsNuclear", getPhysicsNuclearSubstitutions()),
        Pair("PhysicsMolecular", getPhysicsMolecularSubstitutions()),
        Pair("PhysicsElectrodynamics", getPhysicsElectrodynamicsSubstitutions())
)

fun getSubstitutionsByRulePacks(rulePacks: Array<String>): List<ExpressionSubstitution> {
    val result = mutableListOf<ExpressionSubstitution>()
    for (rulePack in rulePacks) {
        val newRules = rulePacksMap[rulePack] ?: listOf<ExpressionSubstitution>()
        result += newRules
    }
    return result.distinctBy { it.code }
}

fun getAllAlgebraSubstitutions() = getLogarithmSubstitutions() + getFactorialSubstitutions() + getTrigonometryCompleteTgCtgSubstitutions()

fun getArithmeticPositiveAdditionSubstitutions() = mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(a))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(a;b))", rightStructureString = "(+(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 20, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(+(a;0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "SimpleComputation"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "ZeroComputation"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 20, code = "PositiveNumberPlusMinus1"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "ParentBracketsExpansion"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsSwap"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsPermutation"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 41, code = "ArgumentsPermutationInOriginalOrder")
)

fun getArithmeticAdditionSubstitutions() = mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(a))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(a;b))", rightStructureString = "(+(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 20, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(+(a;0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(+(-(a)))))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(-(+(-(a))))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(-(-(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(-(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 95, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(a;-(a)))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(a);a))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(a;+(-(a))))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(+(-(a));a))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "SimpleComputation"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "ZeroComputation"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 20, code = "NumberPlusMinus1"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 31, code = "MinusInOutBrackets"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "ParentBracketsExpansion"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsSwap"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsPermutation"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 41, code = "ArgumentsPermutationInOriginalOrder"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 92, code = "AdditiveComplicatingExtension")
)

fun getArithmeticMultiplicationSubstitutions() = getArithmeticAdditionSubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(a;0))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(0;a))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(0)", rightStructureString = "(*(a;0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(a;1))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(1;a))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(*(a;1))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(a;b))", rightStructureString = "(*(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 20, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "OpeningBrackets"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = "ReduceArithmetic"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = "TwoSidesArithmeticReduce"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 15, code = "MultiplicationFactorization"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(a;a))", rightStructureString = "(*(2;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(a;+(a)))", rightStructureString = "(*(2;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(+(a);a))", rightStructureString = "(*(2;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(2;a))", rightStructureString = "(+(a;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(a;*(a;n)))", rightStructureString = "(*(a;+(n;1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(a;+(n;1)))", rightStructureString = "(+(a;*(a;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(*(a;n);a))", rightStructureString = "(*(a;+(1;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(a;+(1;n)))", rightStructureString = "(+(*(a;n);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(-(*(A;C)))", rightStructureString = "(*(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(-(A);C))", rightStructureString = "(+(-(*(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(-(*(A;C)))", rightStructureString = "(*(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(A;-(C)))", rightStructureString = "(+(-(*(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(A;-(C)))", rightStructureString = "(*(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(-(A);C))", rightStructureString = "(*(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(*(A;C))))", rightStructureString = "(*(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(+(-(A));C))", rightStructureString = "(+(-(*(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(*(A;C))))", rightStructureString = "(*(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(A;+(-(C))))", rightStructureString = "(+(-(*(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(A;+(-(C))))", rightStructureString = "(*(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(+(-(A));C))", rightStructureString = "(*(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(-(A);-(B)))", rightStructureString = "(*(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(A;B))", rightStructureString = "(*(+(-(A));+(-(B))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(+(-(A));+(-(B))))", rightStructureString = "(*(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = "")
)

fun getArithmeticDivisionSubstitutions() = getArithmeticMultiplicationSubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(0;a))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(a;1))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(a;a))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(/(1;a);a))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(1;/(1;a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 4, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(/(1;/(1;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(0.5)", rightStructureString = "(/(1;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = false, priority = 15, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(1;2))", rightStructureString = "(0.5)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(a;b))", rightStructureString = "(/(*(a;b);*(b;b)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 92, code = "MultiplicativeComplicatingExtension"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = "ReduceFraction"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 15, code = "DecimalToFraction"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(-(/(A;C)))", rightStructureString = "(/(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(-(A);C))", rightStructureString = "(+(-(/(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(-(/(A;C)))", rightStructureString = "(/(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;-(C)))", rightStructureString = "(+(-(/(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;-(C)))", rightStructureString = "(/(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(-(A);C))", rightStructureString = "(/(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(/(A;C))))", rightStructureString = "(/(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(+(-(A));C))", rightStructureString = "(+(-(/(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(/(A;C))))", rightStructureString = "(/(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;+(-(C))))", rightStructureString = "(+(-(/(A;C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;+(-(C))))", rightStructureString = "(/(+(-(A));C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(+(-(A));C))", rightStructureString = "(/(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(-(A);-(B)))", rightStructureString = "(/(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;B))", rightStructureString = "(/(+(-(A));+(-(B))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(+(-(A));+(-(B))))", rightStructureString = "(/(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(/(B;C);/(A;D)))", rightStructureString = "(/(+(*(B;D);*(C;A));*(C;D)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(/(B;C);-(/(A;D))))", rightStructureString = "(/(+(*(B;D);-(*(C;A)));*(C;D)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(A;/(B;A)))", rightStructureString = "(B)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(/(B;A);A))", rightStructureString = "(B)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(A;/(B;C)))", rightStructureString = "(/(*(A;B);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(/(B;C);A))", rightStructureString = "(/(*(A;B);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;B))", rightStructureString = "(/(1;/(B;A)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(1;/(B;A)))", rightStructureString = "(/(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(A;B);C))", rightStructureString = "(*(A;/(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(/(B;C);A))", rightStructureString = "(/(B;*(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(B;*(A;C)))", rightStructureString = "(/(/(B;C);A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;/(B;C)))", rightStructureString = "(/(*(A;C);B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(A;C);B))", rightStructureString = "(/(A;/(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;*(B;C)))", rightStructureString = "(*(/(A;B);/(1;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;*(B;C)))", rightStructureString = "(*(/(1;B);/(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(/(A;B);/(1;C)))", rightStructureString = "(/(A;*(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(/(1;B);/(A;C)))", rightStructureString = "(/(A;*(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(/(D;B);/(A;C)))", rightStructureString = "(/(*(D;A);*(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(D;A);*(B;C)))", rightStructureString = "(*(/(D;B);/(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(D;A);*(B;A)))", rightStructureString = "(/(D;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(D;A);*(D;C)))", rightStructureString = "(/(A;C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(D;A);D))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(A;D);D))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = "")
)

fun getArithmeticPowSubstitutions() = getArithmeticDivisionSubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(^(a;1))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = true, priority = 95, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(1)", rightStructureString = "(^(1;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = true, priority = 95, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(1)", rightStructureString = "(^(1;3))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = true, priority = 95, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(1;a))", rightStructureString = "(^(a;+(-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(a;+(-(1))))", rightStructureString = "(/(1;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 15, code = "PowFactorization"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(a;+(b;-(c))))", rightStructureString = "(/(^(a;b);^(a;c)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(^(a;b);^(a;c)))", rightStructureString = "(^(a;+(b;-(c))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(B;^(A;C)))", rightStructureString = "(*(B;^(A;+(-(C)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(B;^(A;+(-(C)))))", rightStructureString = "(/(B;^(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(1;^(A;C)))", rightStructureString = "(^(A;+(-(C))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(A;+(-(C))))", rightStructureString = "(/(1;^(A;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;B))", rightStructureString = "(^(/(B;A);+(-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(/(B;A);+(-(1))))", rightStructureString = "(/(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(A;0))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(1;A))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(A;1))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(0;A))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(a;a))", rightStructureString = "(^(a;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = false, priority = 40, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(a;2))", rightStructureString = "(*(a;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = true, isExtending = false, priority = 40, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(a;^(a;n)))", rightStructureString = "(^(a;+(n;1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(a;+(n;1)))", rightStructureString = "(*(a;^(a;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(^(a;n);a))", rightStructureString = "(^(a;+(1;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(a;+(1;n)))", rightStructureString = "(*(^(a;n);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(^(a;n);a))", rightStructureString = "(^(a;+(n;-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(a;+(n;-(1))))", rightStructureString = "(/(^(a;n);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(A;*(B;C)))", rightStructureString = "(^(^(A;B);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(^(A;B);C))", rightStructureString = "(^(A;*(B;C)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(/(B;C);A))", rightStructureString = "(/(^(B;A);^(C;A)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(^(B;A);^(C;A)))", rightStructureString = "(^(/(B;C);A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(-(A);*(2;n)))", rightStructureString = "(^(A;*(2;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(-(A);2))", rightStructureString = "(^(A;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(+(-(A));*(2;n)))", rightStructureString = "(^(A;*(2;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(+(-(A));2))", rightStructureString = "(^(A;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(a;*(2;n)))", rightStructureString = "(^(+(-(a));*(2;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(a;2))", rightStructureString = "(^(+(-(a));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(^(a;b);/(1;b)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "")
)

fun getArithmeticPowExtensionSubstitutions() = getArithmeticPowSubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(^(^(a;2);/(1;2)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(^(^(a;/(1;2));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(^(^(a;3);/(1;3)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(^(^(a;/(1;3));3))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 96, code = "")
)

fun getShortMultiplicationSubstitutions() = getArithmeticPowSubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(a;2);-(^(b;2))))", rightStructureString = "(*(+(a;-(b));+(a;b)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(+(a;-(b));+(a;b)))", rightStructureString = "(+(^(a;2);-(^(b;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(+(a;b);2))", rightStructureString = "(+(^(a;2);*(2;a;b);^(b;2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(a;2);*(2;a;b);^(b;2)))", rightStructureString = "(^(+(a;b);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(a;2);*(2;a);1))", rightStructureString = "(^(+(a;1);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(+(a;-(b));2))", rightStructureString = "(+(^(a;2);-(*(2;a;b));^(b;2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(a;2);-(*(2;a;b));^(b;2)))", rightStructureString = "(^(+(a;-(b));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(a;2);-(*(2;a));1))", rightStructureString = "(^(+(a;-(1));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(+(a;b);3))", rightStructureString = "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))", rightStructureString = "(^(+(a;b);3))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(a;3);*(3;^(a;2));*(3;a);1))", rightStructureString = "(^(+(a;1);3))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(+(a;-(b));3))", rightStructureString = "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))", rightStructureString = "(^(+(a;-(b));3))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(a;3);-(*(3;^(a;2)));*(3;a);-(1)))", rightStructureString = "(^(+(a;-(1));3))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(a;3);-(^(b;3))))", rightStructureString = "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))", rightStructureString = "(+(^(a;3);-(^(b;3))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(+(a;-(1));+(^(a;2);a;1)))", rightStructureString = "(+(^(a;3);-(^(1;3))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(a;3);^(b;3)))", rightStructureString = "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))", rightStructureString = "(+(^(a;3);^(b;3)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(+(a;1);+(^(a;2);-(a);1)))", rightStructureString = "(+(^(a;3);^(1;3)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED)
)

fun getLogarithmSubstitutions() = getShortMultiplicationSubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(a;log(b;a)))", rightStructureString = "(b)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(log(1;A))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(log(A;A))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(log(*(b;c);a))", rightStructureString = "(+(log(b;a);log(c;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(log(b;a);log(c;a)))", rightStructureString = "(log(*(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(log(*(b;c;d);a))", rightStructureString = "(+(log(b;a);log(c;a);log(d;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(log(b;a);log(c;a);log(d;a)))", rightStructureString = "(log(*(b;c;d);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(log(*(b;c;d;e);a))", rightStructureString = "(+(log(b;a);log(c;a);log(d;a);log(e;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(log(b;a);log(c;a);log(d;a);log(e;a)))", rightStructureString = "(log(*(b;c;d;e);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(log(/(b;c);a))", rightStructureString = "(+(log(b;a);-(log(c;a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(log(b;a);-(log(c;a))))", rightStructureString = "(log(/(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(log(^(b;c);a))", rightStructureString = "(*(c;log(b;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(c;log(b;a)))", rightStructureString = "(log(^(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(log(b;a);c))", rightStructureString = "(log(^(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(log(b;^(a;k)))", rightStructureString = "(/(log(b;a);k))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(log(b;a);k))", rightStructureString = "(log(b;^(a;k)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(1;log(b;a)))", rightStructureString = "(log(a;b))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(log(a;b))", rightStructureString = "(/(1;log(b;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(log(c;a);log(b;a)))", rightStructureString = "(log(c;b))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(log(/(b;c);a))", rightStructureString = "(+(-(log(/(c;b);a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(log(/(c;b);a))))", rightStructureString = "(log(/(b;c);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(log(b;a))", rightStructureString = "(+(-(log(/(1;b);a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(log(/(1;b);a))))", rightStructureString = "(log(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(log(/(1;b);a))", rightStructureString = "(+(-(log(b;a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(log(b;a))))", rightStructureString = "(log(/(1;b);a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = "")
)

fun getFactorialSubstitutions() = getArithmeticPowSubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(factorial(+(n;1)))", rightStructureString = "(*(factorial(n);+(n;1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(factorial(n);+(n;1)))", rightStructureString = "(factorial(+(n;1)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(factorial(+(n;1));+(n;1)))", rightStructureString = "(factorial(n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(factorial(n))", rightStructureString = "(/(factorial(+(n;1));+(n;1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(factorial(+(n;1));factorial(n)))", rightStructureString = "(+(n;1))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(n;1))", rightStructureString = "(/(factorial(+(n;1));factorial(n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(factorial(n))", rightStructureString = "(*(factorial(+(n;-(1)));n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(factorial(+(n;-(1)));n))", rightStructureString = "(factorial(n))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(factorial(n);n))", rightStructureString = "(factorial(+(n;-(1))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(factorial(+(n;-(1))))", rightStructureString = "(/(factorial(n);n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(factorial(n);factorial(+(n;-(1)))))", rightStructureString = "(n)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(n)", rightStructureString = "(/(factorial(n);factorial(+(n;-(1)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 85, code = "")
)

fun getCombinatoricsSubstitutions() = getFactorialSubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(U(m;n))", rightStructureString = "(^(m;n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(m;n))", rightStructureString = "(U(m;n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(P(n))", rightStructureString = "(factorial(n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(factorial(n))", rightStructureString = "(P(n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(A(n;n))", rightStructureString = "(P(n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(P(n))", rightStructureString = "(A(n;n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 70, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(C(m;n);P(n)))", rightStructureString = "(A(m;n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(A(m;n))", rightStructureString = "(*(C(m;n);P(n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A(m;n);P(n)))", rightStructureString = "(C(m;n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(C(m;n))", rightStructureString = "(/(A(m;n);P(n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A(m;n);C(m;n)))", rightStructureString = "(P(n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(P(n))", rightStructureString = "(/(A(m;n);C(m;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(V(+(m;1);n))", rightStructureString = "(/(factorial(+(m;n));*(factorial(m);factorial(n))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(factorial(+(m;n));*(factorial(m);factorial(n))))", rightStructureString = "(V(+(m;1);n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(factorial(+(m;n)))", rightStructureString = "(*(V(+(m;1);n);*(factorial(m);factorial(n))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(V(+(m;1);n);*(factorial(m);factorial(n))))", rightStructureString = "(factorial(+(m;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(factorial(m);factorial(n)))", rightStructureString = "(/(factorial(+(m;n));V(+(m;1);n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(factorial(+(m;n));V(+(m;1);n)))", rightStructureString = "(*(factorial(m);factorial(n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(C(+(m;n);n))", rightStructureString = "(/(factorial(+(m;n));*(factorial(m);factorial(n))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(C(+(m;n);n))", rightStructureString = "(V(+(m;1);n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(V(+(m;1);n))", rightStructureString = "(C(+(m;n);n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(A(+(m;n);n))", rightStructureString = "(/(factorial(+(m;n));factorial(m)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(factorial(+(m;n));factorial(m)))", rightStructureString = "(A(+(m;n);n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(factorial(+(m;n)))", rightStructureString = "(*(A(+(m;n);n);factorial(m)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(A(+(m;n);n);factorial(m)))", rightStructureString = "(factorial(+(m;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(factorial(m);A(+(m;n);n)))", rightStructureString = "(factorial(+(m;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(factorial(m))", rightStructureString = "(/(factorial(+(m;n));A(+(m;n);n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(factorial(+(m;n));A(+(m;n);n)))", rightStructureString = "(factorial(m))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(S1(m;n))", rightStructureString = "(*(factorial(n);S2(m;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(factorial(n);S2(m;n)))", rightStructureString = "(S1(m;n))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(factorial(n))", rightStructureString = "(/(S1(m;n);S2(m;n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(S1(m;n);S2(m;n)))", rightStructureString = "(factorial(n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(S2(m;n))", rightStructureString = "(/(S1(m;n);factorial(n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(S1(m;n);factorial(n)))", rightStructureString = "(S2(m;n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(S2(+(m;1);+(n;1)))", rightStructureString = "(+(S2(m;n);*(n;S2(m;+(n;1)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(S2(m;n);*(n;S2(m;+(n;1)))))", rightStructureString = "(S2(+(m;1);+(n;1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(S2(m;m))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(1)", rightStructureString = "(S2(m;n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(C(*(2;n);n))", rightStructureString = "(*(C(n);+(n;1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(C(n);+(n;1)))", rightStructureString = "(C(*(2;n);n))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(C(n))", rightStructureString = "(/(C(*(2;n);n);+(n;1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(C(*(2;n);n);+(n;1)))", rightStructureString = "(C(n))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(n;1))", rightStructureString = "(/(C(*(2;n);n);C(n)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 80, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(C(*(2;n);n);C(n)))", rightStructureString = "(+(n;1))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(C(0))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(1)", rightStructureString = "(C(0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = "")
)

fun getTrigonometrySubstitutions() = getShortMultiplicationSubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(sin(a);2);^(cos(a);2)))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(1;-(^(sin(a);2))))", rightStructureString = "(^(cos(a);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(cos(a);2))", rightStructureString = "(+(1;-(^(sin(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(a))", rightStructureString = "(^(+(1;-(^(sin(a);2)));0.5))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(1;-(^(cos(a);2))))", rightStructureString = "(^(sin(a);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(sin(a);2))", rightStructureString = "(+(1;-(^(cos(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(a))", rightStructureString = "(^(+(1;-(^(cos(a);2)));0.5))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(1;^(cos(a);2)))", rightStructureString = "(+(1;^(tg(a);2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(1;^(tg(a);2)))", rightStructureString = "(/(1;^(cos(a);2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(1;^(sin(a);2)))", rightStructureString = "(+(1;^(ctg(a);2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(1;^(ctg(a);2)))", rightStructureString = "(/(1;^(sin(a);2)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(1;+(1;^(tg(a);2))))", rightStructureString = "(^(cos(a);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(cos(a);2))", rightStructureString = "(/(1;+(1;^(tg(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(1;+(1;^(ctg(a);2))))", rightStructureString = "(^(sin(a);2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(sin(a);2))", rightStructureString = "(/(1;+(1;^(ctg(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(tg(a);ctg(a)))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 5, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(sin(a);cos(a)))", rightStructureString = "(tg(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(tg(a))", rightStructureString = "(/(sin(a);cos(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(cos(a);sin(a)))", rightStructureString = "(ctg(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(ctg(a))", rightStructureString = "(/(cos(a);sin(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(1;ctg(a)))", rightStructureString = "(tg(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(tg(a))", rightStructureString = "(/(1;ctg(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(1;tg(a)))", rightStructureString = "(ctg(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(ctg(a))", rightStructureString = "(/(1;tg(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 25, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(+(a;b)))", rightStructureString = "(+(*(sin(a);cos(b));*(sin(b);cos(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(*(sin(a);cos(b));*(sin(b);cos(a))))", rightStructureString = "(sin(+(a;b)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(+(a;-(b))))", rightStructureString = "(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))", rightStructureString = "(sin(+(a;-(b))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(+(a;b)))", rightStructureString = "(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))", rightStructureString = "(cos(+(a;b)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(+(a;-(b))))", rightStructureString = "(+(*(cos(a);cos(b));*(sin(b);sin(a))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(*(cos(a);cos(b));*(sin(b);sin(a))))", rightStructureString = "(cos(+(a;-(b))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(*(2;a)))", rightStructureString = "(*(2;sin(a);cos(a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(2;sin(a);cos(a)))", rightStructureString = "(sin(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(*(2;a)))", rightStructureString = "(+(^(cos(a);2);-(^(sin(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(^(cos(a);2);-(^(sin(a);2))))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(^(sin(a);2));^(cos(a);2)))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(*(2;a)))", rightStructureString = "(+(1;-(*(2;^(sin(a);2)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(1;-(*(2;^(sin(a);2)))))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(*(2;^(sin(a);2)));1))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(*(2;a)))", rightStructureString = "(+(*(2;^(cos(a);2));-(1)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(*(2;^(cos(a);2));-(1)))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(1);*(2;^(cos(a);2))))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 24, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(sin(a);sin(b)))", rightStructureString = "(*(2;sin(/(+(a;b);2));cos(/(+(a;-(b));2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 23, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(sin(a);-(sin(b))))", rightStructureString = "(*(2;sin(/(+(a;-(b));2));cos(/(+(a;b);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 23, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(cos(a);cos(b)))", rightStructureString = "(*(2;cos(/(+(a;b);2));cos(/(+(a;-(b));2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 23, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(cos(a);-(cos(b))))", rightStructureString = "(*(2;sin(/(+(a;-(b));2));sin(/(+(a;b);2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 23, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(sin(a);sin(b)))", rightStructureString = "(/(+(cos(+(a;-(b)));-(cos(+(a;b))));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 23, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(sin(a);cos(b)))", rightStructureString = "(/(+(sin(+(a;-(b)));sin(+(a;b)));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 23, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(cos(a);cos(b)))", rightStructureString = "(/(+(cos(+(a;-(b)));cos(+(a;b)));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 23, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(+(-(a))))", rightStructureString = "(+(-(sin(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(sin(a))))", rightStructureString = "(sin(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(-(sin(a)))", rightStructureString = "(sin(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(+(-(a))))", rightStructureString = "(cos(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(a))", rightStructureString = "(cos(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(+(π;a)))", rightStructureString = "(+(-(cos(-(a)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(+(π;-(a))))", rightStructureString = "(+(-(cos(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(cos(a))))", rightStructureString = "(cos(+(π;-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(-(cos(a)))", rightStructureString = "(cos(+(π;-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(+(π;a)))", rightStructureString = "(sin(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(+(π;-(a))))", rightStructureString = "(sin(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(a))", rightStructureString = "(sin(+(π;-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(+(/(π;2);-(a))))", rightStructureString = "(cos(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(+(/(π;2);a)))", rightStructureString = "(cos(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(a))", rightStructureString = "(sin(+(/(π;2);-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(+(/(π;2);-(a))))", rightStructureString = "(sin(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(+(/(π;2);a)))", rightStructureString = "(sin(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(a))", rightStructureString = "(cos(+(/(π;2);-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(+(-(a))))", rightStructureString = "(+(-(sin(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 17, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(-(a)))", rightStructureString = "(+(-(sin(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 17, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(sin(a))))", rightStructureString = "(sin(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 17, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(-(sin(a)))", rightStructureString = "(sin(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 17, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(+(b;-(a))))", rightStructureString = "(+(-(sin(+(a;-(b))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(sin(+(a;-(b))))))", rightStructureString = "(sin(+(b;-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(+(-(a))))", rightStructureString = "(cos(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(-(a)))", rightStructureString = "(cos(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(a))", rightStructureString = "(cos(+(-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(+(a;-(b))))", rightStructureString = "(cos(+(b;-(a))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 14, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(0))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(0)", rightStructureString = "(sin(0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(π))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(0)", rightStructureString = "(sin(π))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(/(π;2)))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(1)", rightStructureString = "(sin(/(π;2)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(0))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(1)", rightStructureString = "(cos(0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(π))", rightStructureString = "(+(-(1)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(+(-(1)))", rightStructureString = "(cos(π))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(-(1))", rightStructureString = "(cos(π))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(/(π;2)))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(0)", rightStructureString = "(cos(/(π;2)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(/(π;6)))", rightStructureString = "(/(1;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(0.5)", rightStructureString = "(sin(/(π;6)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(/(π;4)))", rightStructureString = "(/(^(2;/(1;2));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(^(2;0.5);2))", rightStructureString = "(sin(/(π;4)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 13, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(/(π;3)))", rightStructureString = "(/(^(3;/(1;2));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(^(3;0.5);2))", rightStructureString = "(sin(/(π;3)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 13, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(/(π;3)))", rightStructureString = "(/(1;2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(0.5)", rightStructureString = "(cos(/(π;3)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(/(π;4)))", rightStructureString = "(/(^(2;/(1;2));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(^(2;0.5);2))", rightStructureString = "(cos(/(π;4)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 13, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(/(π;6)))", rightStructureString = "(/(^(3;/(1;2));2))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(^(3;0.5);2))", rightStructureString = "(cos(/(π;6)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 13, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(tg(/(π;4)))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(1)", rightStructureString = "(tg(/(π;4)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(ctg(/(π;4)))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(1)", rightStructureString = "(ctg(/(π;4)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(tg(0))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(0)", rightStructureString = "(tg(0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(ctg(/(π;2)))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(0)", rightStructureString = "(ctg(/(π;2)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(a))", rightStructureString = "(+(-(sin(+(a;π)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(a))", rightStructureString = "(+(-(sin(+(a;-(π))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(a))", rightStructureString = "(+(-(cos(+(a;π)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(a))", rightStructureString = "(+(-(cos(+(a;-(π))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 89, code = "")
)

fun getTrigonometryZkSubstitutions() = getTrigonometrySubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(+(a;*(2;π;k))))", rightStructureString = "(sin(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(+(a;*(2;π;k))))", rightStructureString = "(cos(a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED)
)

fun getComplexesSubstitutions() = mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(sys_def_i_complex;sys_def_i_complex))", rightStructureString = "(+(-(1)))", basedOnTaskContext = true, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 100, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(sys_def_i_complex;2))", rightStructureString = "(+(-(1)))", basedOnTaskContext = true, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 100, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(abs(+(x;*(y;sys_def_i_complex))))", rightStructureString = "(sqrt(+(^(x;2);^(y;2))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED_AND_I_MULTIPLICATED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(abs(+(x;*(y;sys_def_i_complex))))", rightStructureString = "(^(+(^(x;2);^(y;2));0.5))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED_AND_I_MULTIPLICATED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(exp(+(x;*(y;sys_def_i_complex))))", rightStructureString = "(*(exp(x);+(cos(y);*(sys_def_i_complex;sin(y)))))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED_AND_I_MULTIPLICATED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(exp(ln(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(z))", rightStructureString = "(/(+(exp(*(sys_def_i_complex;z));exp(+(-(*(sys_def_i_complex;z)))));2))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(z))", rightStructureString = "(/(+(exp(*(sys_def_i_complex;z));-(exp(+(-(*(sys_def_i_complex;z))))));*(2;sys_def_i_complex)))", basedOnTaskContext = false, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 30, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(e;ln(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "")
) + getTrigonometryZkSubstitutions() + getArithmeticMultiplicationSubstitutions()


fun getTrigonometryCompleteTgCtgSubstitutions() = getTrigonometrySubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(sin(*(2;a)))", rightStructureString = "(/(*(2;tg(a));+(1;^(tg(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(2;tg(a));+(1;^(tg(a);2))))", rightStructureString = "(sin(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(cos(*(2;a)))", rightStructureString = "(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))", rightStructureString = "(cos(*(2;a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(tg(+(a;b)))", rightStructureString = "(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))", rightStructureString = "(tg(+(a;b)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(tg(+(a;-(b))))", rightStructureString = "(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))", rightStructureString = "(tg(+(a;-(b))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(ctg(+(a;b)))", rightStructureString = "(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))", rightStructureString = "(ctg(+(a;b)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(ctg(+(a;-(b))))", rightStructureString = "(/(+(*(ctg(a);ctg(b));1);+(ctg(a);-(ctg(b)))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(+(*(ctg(a);ctg(b));1);+(ctg(a);-(ctg(b)))))", rightStructureString = "(ctg(+(a;-(b))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "", normalizationType = ExpressionSubstitutionNormType.SORTED)
)

fun getLogicBaseSubstitutions() = mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(not(and(A;B)))", rightStructureString = "(or(not(A);not(B)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 15, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(not(A);not(B)))", rightStructureString = "(not(and(A;B)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(not(or(A;B)))", rightStructureString = "(and(not(A);not(B)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 15, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);not(B)))", rightStructureString = "(not(or(A;B)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(not(not(a)))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(not(not(a)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 89, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(a;a))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(or(a;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(a;a))", rightStructureString = "(a)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(and(a;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(a;b))", rightStructureString = "(and(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 40, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(a;b))", rightStructureString = "(or(b;a))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 40, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(and(a;1))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(or(a;0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(A;not(A)))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(not(A);A))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;not(A)))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);A))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(A;1))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(1;A))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;1))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(1;A))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(A;0))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(0;A))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;0))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(0;A))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(not(0))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(not(1))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "SimpleComputation"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = "ZeroComputation"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "ParentBracketsExpansion"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsSwap"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 40, code = "ArgumentsPermutation"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 30, code = "OpeningBrackets"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 41, code = "ArgumentsPermutationInOriginalOrder"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = "ReduceArithmetic"),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = "TwoSidesArithmeticReduce"),

        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(not(A);B))", rightStructureString = "(implic(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(B;not(A)))", rightStructureString = "(implic(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(implic(A;B))", rightStructureString = "(or(not(A);B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;not(B)))", rightStructureString = "(set-(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(B);A))", rightStructureString = "(set-(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(set-(A;B))", rightStructureString = "(and(A;not(B)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(set-(A;B))", rightStructureString = "(not(implic(A;B)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(not(implic(A;B)))", rightStructureString = "(set-(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(implic(A;B))", rightStructureString = "(not(set-(A;B)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(not(set-(A;B)))", rightStructureString = "(implic(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(set-(A;0))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(set-(A;1))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(set-(0;A))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(set-(1;A))", rightStructureString = "(not(A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(implic(0;A))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(implic(A;1))", rightStructureString = "(1)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(implic(A;0))", rightStructureString = "(not(A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(implic(1;A))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(A)", rightStructureString = "(set-(A;0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 91, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(A)", rightStructureString = "(implic(1;A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 91, code = ""),

        expressionSubstitutionFromStructureStrings(leftStructureString = "(xor(A;B))", rightStructureString = "(or(and(not(A);B);and(A;not(B))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(and(not(A);B);and(A;not(B))))", rightStructureString = "(xor(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(alleq(A;B))", rightStructureString = "(or(and(A;B);and(not(A);not(B))))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(and(A;B);and(not(A);not(B))))", rightStructureString = "(alleq(A;B))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 30, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(xor(A;0))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(xor(A;1))", rightStructureString = "(not(A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(xor(0;A))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(xor(1;A))", rightStructureString = "(not(A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(alleq(0;A))", rightStructureString = "(not(A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(alleq(A;1))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(alleq(A;0))", rightStructureString = "(not(A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(alleq(1;A))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(A)", rightStructureString = "(xor(A;0))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 91, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(A)", rightStructureString = "(alleq(1;A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 91, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(not(A))", rightStructureString = "(xor(A;1))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 91, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(not(A))", rightStructureString = "(alleq(0;A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 91, code = "")
)

fun getLogicAbsorptionLawSubstitutions() = getLogicBaseSubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;or(A;B)))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 6, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(A;and(A;B)))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 6, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;or(B;A)))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 6, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(A;and(B;A)))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 6, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;B);A))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 6, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(and(A;B);A))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 6, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(B;A);A))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 6, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(or(and(B;A);A))", rightStructureString = "(A)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 6, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(A)", rightStructureString = "(and(A;or(A;B)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(A)", rightStructureString = "(or(A;and(A;B)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = true, priority = 90, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "", rightStructureString = "", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 92, code = "SetComplicatingExtension")
)

fun getLogicResolutionSubstitutions() = getLogicBaseSubstitutions() + mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);A))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;not(A)))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);not(A)))", rightStructureString = "(and(X;or(A;X);not(A)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);or(A;X)))", rightStructureString = "(and(X;not(A);or(A;X)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);A))", rightStructureString = "(and(X;or(not(A);X);A))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;or(not(A);X)))", rightStructureString = "(and(X;A;or(not(A);X)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);or(not(A);Y)))", rightStructureString = "(and(or(X;Y);or(A;X);or(not(A);Y)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);or(A;Y)))", rightStructureString = "(and(or(X;Y);or(not(A);X);or(A;Y)))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);A;C))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;not(A);C))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);not(A);C))", rightStructureString = "(and(X;or(A;X);not(A);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);or(A;X);C))", rightStructureString = "(and(X;not(A);or(A;X);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);A;C))", rightStructureString = "(and(X;or(not(A);X);A;C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;or(not(A);X);C))", rightStructureString = "(and(X;A;or(not(A);X);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);or(not(A);Y);C))", rightStructureString = "(and(or(X;Y);or(A;X);or(not(A);Y);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);or(A;Y);C))", rightStructureString = "(and(or(X;Y);or(not(A);X);or(A;Y);C))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);A;C;D))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;not(A);C;D))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);not(A);C;D))", rightStructureString = "(and(X;or(A;X);not(A);C;D))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);or(A;X);C;D))", rightStructureString = "(and(X;not(A);or(A;X);C;D))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);A;C;D))", rightStructureString = "(and(X;or(not(A);X);A;C;D))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;or(not(A);X);C;D))", rightStructureString = "(and(X;A;or(not(A);X);C;D))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);or(not(A);Y);C;D))", rightStructureString = "(and(or(X;Y);or(A;X);or(not(A);Y);C;D))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);or(A;Y);C;D))", rightStructureString = "(and(or(X;Y);or(not(A);X);or(A;Y);C;D))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);A;C;D;E))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;not(A);C;D;E))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);not(A);C;D;E))", rightStructureString = "(and(X;or(A;X);not(A);C;D;E))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);or(A;X);C;D;E))", rightStructureString = "(and(X;not(A);or(A;X);C;D;E))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);A;C;D;E))", rightStructureString = "(and(X;or(not(A);X);A;C;D;E))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;or(not(A);X);C;D;E))", rightStructureString = "(and(X;A;or(not(A);X);C;D;E))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);or(not(A);Y);C;D;E))", rightStructureString = "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);or(A;Y);C;D;E))", rightStructureString = "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);A;C;D;E;F))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;not(A);C;D;E;F))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);not(A);C;D;E;F))", rightStructureString = "(and(X;or(A;X);not(A);C;D;E;F))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);or(A;X);C;D;E;F))", rightStructureString = "(and(X;not(A);or(A;X);C;D;E;F))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);A;C;D;E;F))", rightStructureString = "(and(X;or(not(A);X);A;C;D;E;F))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;or(not(A);X);C;D;E;F))", rightStructureString = "(and(X;A;or(not(A);X);C;D;E;F))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);or(not(A);Y);C;D;E;F))", rightStructureString = "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);or(A;Y);C;D;E;F))", rightStructureString = "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);A;C;D;E;F;G))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;not(A);C;D;E;F;G))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);not(A);C;D;E;F;G))", rightStructureString = "(and(X;or(A;X);not(A);C;D;E;F;G))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);or(A;X);C;D;E;F;G))", rightStructureString = "(and(X;not(A);or(A;X);C;D;E;F;G))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);A;C;D;E;F;G))", rightStructureString = "(and(X;or(not(A);X);A;C;D;E;F;G))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;or(not(A);X);C;D;E;F;G))", rightStructureString = "(and(X;A;or(not(A);X);C;D;E;F;G))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);or(not(A);Y);C;D;E;F;G))", rightStructureString = "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);or(A;Y);C;D;E;F;G))", rightStructureString = "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);A;C;D;E;F;G;H))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;not(A);C;D;E;F;G;H))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);not(A);C;D;E;F;G;H))", rightStructureString = "(and(X;or(A;X);not(A);C;D;E;F;G;H))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);or(A;X);C;D;E;F;G;H))", rightStructureString = "(and(X;not(A);or(A;X);C;D;E;F;G;H))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);A;C;D;E;F;G;H))", rightStructureString = "(and(X;or(not(A);X);A;C;D;E;F;G;H))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;or(not(A);X);C;D;E;F;G;H))", rightStructureString = "(and(X;A;or(not(A);X);C;D;E;F;G;H))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);or(not(A);Y);C;D;E;F;G;H))", rightStructureString = "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G;H))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);or(A;Y);C;D;E;F;G;H))", rightStructureString = "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G;H))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);A;C;D;E;F;G;H;I))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;not(A);C;D;E;F;G;H;I))", rightStructureString = "(0)", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 5, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);not(A);C;D;E;F;G;H;I))", rightStructureString = "(and(X;or(A;X);not(A);C;D;E;F;G;H;I))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(not(A);or(A;X);C;D;E;F;G;H;I))", rightStructureString = "(and(X;not(A);or(A;X);C;D;E;F;G;H;I))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);A;C;D;E;F;G;H;I))", rightStructureString = "(and(X;or(not(A);X);A;C;D;E;F;G;H;I))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(A;or(not(A);X);C;D;E;F;G;H;I))", rightStructureString = "(and(X;A;or(not(A);X);C;D;E;F;G;H;I))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(A;X);or(not(A);Y);C;D;E;F;G;H;I))", rightStructureString = "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G;H;I))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(and(or(not(A);X);or(A;Y);C;D;E;F;G;H;I))", rightStructureString = "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G;H;I))", basedOnTaskContext = false, matchJumbledAndNested = false, simpleAdditional = false, isExtending = false, priority = 10, code = "")
)


fun getPhysicsNuclearSubstitutions() = mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(m)", rightStructureString = "(/(E;^(c;2)))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(E;^(c;2)))", rightStructureString = "(m)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(c)", rightStructureString = "(^(/(E;m);/(1;2)))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(/(E;m);0.5))", rightStructureString = "(c)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(E)", rightStructureString = "(*(m;^(c;2)))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(m;^(c;2)))", rightStructureString = "(E)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),

        expressionSubstitutionFromStructureStrings(leftStructureString = "(h)", rightStructureString = "(/(E;ν))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(E;ν))", rightStructureString = "(h)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(ν)", rightStructureString = "(/(E;h))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(E;h))", rightStructureString = "(ν)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(E)", rightStructureString = "(*(h;ν))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(h;ν))", rightStructureString = "(E)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),

        expressionSubstitutionFromStructureStrings(leftStructureString = "(λ)", rightStructureString = "(/(c;ν))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(c;ν))", rightStructureString = "(λ)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(ν)", rightStructureString = "(/(c;λ))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(c;λ))", rightStructureString = "(ν)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(c)", rightStructureString = "(*(λ;ν))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(λ;ν))", rightStructureString = "(c)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),

        expressionSubstitutionFromStructureStrings(leftStructureString = "(c)", rightStructureString = "(/(p;m))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(p;m))", rightStructureString = "(c)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(m)", rightStructureString = "(/(p;c))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(p;c))", rightStructureString = "(m)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(p)", rightStructureString = "(*(m;c))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(m;c))", rightStructureString = "(p)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = "")
)

fun getPhysicsCircleMovingSubstitutions() = mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(ω)", rightStructureString = "(/(*(2;π);T))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(2;π);T))", rightStructureString = "(ω)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(T)", rightStructureString = "(/(*(2;π);ω))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(2;π);ω))", rightStructureString = "(T)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),

        expressionSubstitutionFromStructureStrings(leftStructureString = "(ω)", rightStructureString = "(*(2;π;v))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(2;π;v))", rightStructureString = "(ω)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(v)", rightStructureString = "(/(ω;*(2;π)))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(ω;*(2;π)))", rightStructureString = "(v)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),

        expressionSubstitutionFromStructureStrings(leftStructureString = "(ω)", rightStructureString = "(/(v;R))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(v;R))", rightStructureString = "(ω)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(R)", rightStructureString = "(/(v;ω))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(v;ω))", rightStructureString = "(R)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(v)", rightStructureString = "(*(ω;R))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(ω;R))", rightStructureString = "(v)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),

        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(/(^(v;2);R))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(^(v;2);R))", rightStructureString = "(a)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(R)", rightStructureString = "(/(^(v;2);a))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(^(v;2);a))", rightStructureString = "(R)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(v)", rightStructureString = "(^(*(a;R);/(1;2)))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(*(a;R);0.5))", rightStructureString = "(v)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = "")
)

fun getPhysicsMolecularSubstitutions() = mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(P)", rightStructureString = "(/(F;S))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(F;S))", rightStructureString = "(P)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(S)", rightStructureString = "(/(F;P))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(F;P))", rightStructureString = "(S)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(F)", rightStructureString = "(*(P;S))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(P;S))", rightStructureString = "(F)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(m)", rightStructureString = "(/(F;a))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(F;a))", rightStructureString = "(m)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(/(F;P))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(F;m))", rightStructureString = "(a)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(F)", rightStructureString = "(*(m;a))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(m;a))", rightStructureString = "(F)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(ν)", rightStructureString = "(/(m;μ))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(m;μ))", rightStructureString = "(ν)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(μ)", rightStructureString = "(/(m;ν))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(m;ν))", rightStructureString = "(μ)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(m)", rightStructureString = "(*(ν;μ))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(ν;μ))", rightStructureString = "(m)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(ν)", rightStructureString = "(/(N;Nₐ))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(N;Nₐ))", rightStructureString = "(ν)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(Nₐ)", rightStructureString = "(/(N;ν))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(N;ν))", rightStructureString = "(Nₐ)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(N)", rightStructureString = "(*(ν;Nₐ))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(ν;Nₐ))", rightStructureString = "(N)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(k)", rightStructureString = "(/(R;Nₐ))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(R;Nₐ))", rightStructureString = "(k)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(Nₐ)", rightStructureString = "(/(R;k))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(R;k))", rightStructureString = "(Nₐ)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(R)", rightStructureString = "(*(k;Nₐ))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(k;Nₐ))", rightStructureString = "(R)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(n)", rightStructureString = "(/(N;V))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(N;V))", rightStructureString = "(n)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(V)", rightStructureString = "(/(N;n))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(N;n))", rightStructureString = "(V)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(N)", rightStructureString = "(*(n;V))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(n;V))", rightStructureString = "(N)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(P)", rightStructureString = "(*(n;k;T))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(n;k;T))", rightStructureString = "(P)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(T)", rightStructureString = "(/(*(n;k);P))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(n;k);P))", rightStructureString = "(T)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(P;V))", rightStructureString = "(*(ν;R;T))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(ν;R;T))", rightStructureString = "(*(P;V))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(P)", rightStructureString = "(/(*(ν;R;T);V))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(ν;R;T);V))", rightStructureString = "(P)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(V)", rightStructureString = "(/(*(ν;R;T);P))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(ν;R;T);P))", rightStructureString = "(V)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(T)", rightStructureString = "(/(*(P;V);*(ν;R)))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(P;V);*(ν;R)))", rightStructureString = "(T)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(U)", rightStructureString = "(*(N;/(3;2);k;T))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(N;/(3;2);k;T))", rightStructureString = "(U)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(U)", rightStructureString = "(*(/(3;2);ν;R;T))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(/(3;2);ν;R;T))", rightStructureString = "(U)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = "")
)

fun getPhysicsSimpleMovingSubstitutions() = mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(s)", rightStructureString = "(/(v;t))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(s;t))", rightStructureString = "(v)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(t)", rightStructureString = "(/(s;v))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(s;v))", rightStructureString = "(t)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(s)", rightStructureString = "(*(v;t))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(v;t))", rightStructureString = "(s)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(/(v;t))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(v;t))", rightStructureString = "(a)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(t)", rightStructureString = "(/(v;a))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(v;a))", rightStructureString = "(t)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(v)", rightStructureString = "(*(a;t))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(a;t))", rightStructureString = "(v)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(s)", rightStructureString = "(/(*(a;^(t;2));2))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(a;^(t;2));2))", rightStructureString = "(s)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(a)", rightStructureString = "(/(*(2;s);^(t;2)))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(2;s);^(t;2)))", rightStructureString = "(a)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(t)", rightStructureString = "(^(/(*(2;s);a);0.5))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(^(/(*(2;s);a);0.5))", rightStructureString = "(t)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = "")
)

fun getPhysicsElectrodynamicsSubstitutions() = mutableListOf(
        expressionSubstitutionFromStructureStrings(leftStructureString = "(I)", rightStructureString = "(/(q;t))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(q;t))", rightStructureString = "(I)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(t)", rightStructureString = "(/(q;I))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(q;I))", rightStructureString = "(t)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(q)", rightStructureString = "(*(I;t))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(I;t))", rightStructureString = "(q)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(q)", rightStructureString = "(/(A;U))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;U))", rightStructureString = "(q)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(U)", rightStructureString = "(/(A;q))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;q))", rightStructureString = "(U)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(A)", rightStructureString = "(*(U;q))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(U;q))", rightStructureString = "(A)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(S)", rightStructureString = "(/(*(ρ;l);R))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(ρ;l);R))", rightStructureString = "(S)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(R)", rightStructureString = "(/(*(ρ;l);S))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(ρ;l);S))", rightStructureString = "(R)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(l)", rightStructureString = "(/(*(S;R);ρ))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(S;R);ρ))", rightStructureString = "(l)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(ρ)", rightStructureString = "(/(*(S;R);l))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(S;R);l))", rightStructureString = "(ρ)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(S;R))", rightStructureString = "(*(ρ;l))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(ρ;l))", rightStructureString = "(*(S;R))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(I)", rightStructureString = "(/(U;R))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(U;R))", rightStructureString = "(I)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(R)", rightStructureString = "(/(U;I))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(U;I))", rightStructureString = "(R)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(U)", rightStructureString = "(*(I;R))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(I;R))", rightStructureString = "(U)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(P)", rightStructureString = "(/(A;t))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;t))", rightStructureString = "(P)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(t)", rightStructureString = "(/(A;P))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(A;P))", rightStructureString = "(t)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(A)", rightStructureString = "(*(P;t))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(P;t))", rightStructureString = "(A)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(U)", rightStructureString = "(/(P;I))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(P;I))", rightStructureString = "(U)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(I)", rightStructureString = "(/(P;U))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(P;U))", rightStructureString = "(I)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(P)", rightStructureString = "(*(I;U))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(I;U))", rightStructureString = "(P)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(Q)", rightStructureString = "(A)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(A)", rightStructureString = "(Q)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(P)", rightStructureString = "(/(Q;t))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(Q;t))", rightStructureString = "(P)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(t)", rightStructureString = "(/(Q;P))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(Q;P))", rightStructureString = "(t)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(Q)", rightStructureString = "(*(P;t))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(P;t))", rightStructureString = "(Q)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(C)", rightStructureString = "(/(q;U))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(q;U))", rightStructureString = "(C)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(U)", rightStructureString = "(/(q;C))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(q;C))", rightStructureString = "(U)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(q)", rightStructureString = "(*(U;C))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(U;C))", rightStructureString = "(q)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(W)", rightStructureString = "(/(*(C;^(U;2));2))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(C;^(U;2));2))", rightStructureString = "(W)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(C)", rightStructureString = "(/(*(2;W);^(U;2)))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(2;W);^(U;2)))", rightStructureString = "(C)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(W)", rightStructureString = "(/(*(L;^(I;2));2))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(L;^(I;2));2))", rightStructureString = "(W)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(L)", rightStructureString = "(/(*(2;W);^(I;2)))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(*(2;W);^(I;2)))", rightStructureString = "(L)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(I)", rightStructureString = "(/(Ψ;L))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(Ψ;L))", rightStructureString = "(I)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(L)", rightStructureString = "(/(Ψ;I))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(Ψ;I))", rightStructureString = "(L)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(Ψ)", rightStructureString = "(*(I;L))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(I;L))", rightStructureString = "(Ψ)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(I)", rightStructureString = "(/(Fₐ;*(B;l;sin(φ))))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(Fₐ;*(B;l;sin(φ))))", rightStructureString = "(I)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(B)", rightStructureString = "(/(Fₐ;*(I;l;sin(φ))))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(Fₐ;*(I;l;sin(φ))))", rightStructureString = "(B)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(l)", rightStructureString = "(/(Fₐ;*(B;I;sin(φ))))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(Fₐ;*(B;I;sin(φ))))", rightStructureString = "(l)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(Fₐ)", rightStructureString = "(*(I;B;l;sin(φ)))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(I;B;l;sin(φ)))", rightStructureString = "(Fₐ)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(B)", rightStructureString = "(/(Ψ;*(S;cos(φ))))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(Ψ;*(S;cos(φ))))", rightStructureString = "(B)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(S)", rightStructureString = "(/(Ψ;*(B;cos(φ))))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(Ψ;*(B;cos(φ))))", rightStructureString = "(S)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(Ψ)", rightStructureString = "(*(B;S;cos(φ)))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(B;S;cos(φ)))", rightStructureString = "(Ψ)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(E)", rightStructureString = "(/(F;q))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(F;q))", rightStructureString = "(E)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(q)", rightStructureString = "(/(F;E))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(F;E))", rightStructureString = "(q)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(F)", rightStructureString = "(*(E;q))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(E;q))", rightStructureString = "(F)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(d)", rightStructureString = "(/(U;E))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(U;E))", rightStructureString = "(d)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(E)", rightStructureString = "(/(U;d))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(/(U;d))", rightStructureString = "(E)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(U)", rightStructureString = "(*(E;d))", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = ""),
        expressionSubstitutionFromStructureStrings(leftStructureString = "(*(E;d))", rightStructureString = "(U)", basedOnTaskContext = true, matchJumbledAndNested = true, simpleAdditional = false, isExtending = false, priority = 35, code = "")
)
